#pragma once

// CombinationPlugin.cpp : Определяет экспортированные функции для приложения DLL.
//
#include <jni.h>


#include <iostream>
#include <stdlib.h>
#include <vector>
#include <set>
#include <random>
#include <algorithm>
#include <iterator>
#include <iostream>
#include <chrono>
#include <array>

#define ACE_CARD            14
#define MAX_INDEX_IN_COMBO  4
#define COMBO_SIZE          5

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <fstream>

#define UINT_BIT ( sizeof( unsigned int ) * CHAR_BIT )
#define C1 0x1010101
#define C2 0x1010104

typedef unsigned long long int ULONG64;
typedef unsigned int UINT32;
typedef unsigned char UINT8;
typedef unsigned char BOOL;

#define true 1
#define false 0

extern "C"
{
	 int get_combination(int cards[], int cards_count);
	 int test();
	 void shuffle(int arr[], int arr_size);
	 int get_random_from_range(int from, int to);
	 uint32_t get_random_from_range_uint(uint32_t from, uint32_t to);
	 void generate_random_range(unsigned char data[], int data_size);

	 void crypt_data(unsigned char data[], unsigned char mac[], int data_len, unsigned int key[],  unsigned int synchro[]);
	 void decrypt_data(unsigned char data[], unsigned char mac[], int data_len, unsigned int key[],  unsigned int synchro[]);

	 unsigned char*  crypt_data1(unsigned char data[], unsigned int key[], unsigned int synchro[]);
	 unsigned char*  decrypt_data1(unsigned char data[], unsigned int key[], unsigned int synchro[]);
	 unsigned char* get_mac1(unsigned char data[], unsigned int key[], unsigned int synchro[]);

	 int freeMem(char* arrayPtr);
}

/**
@brief Основной контекст CryptoAPI ГОСТ 28147-89
@brief Содержит в себе ключ, и таблицу замен.

@param m_uiKey Ключ.
@param m_iTable Таблица замен.
*/

struct CGost89Crypt
{
	UINT32 m_uiKey[8];
	UINT8 m_iTable[8][16];
};

UINT8 m_iTable[8][16] =
{
	0xF, 0xC, 0x2, 0xA, 0x6, 0x4, 0x5, 0x0, 0x7, 0x9, 0xE, 0xD, 0x1, 0xB, 0x8, 0x3,
	0xB, 0x6, 0x3, 0x4, 0xC, 0xF, 0xE, 0x2, 0x7, 0xD, 0x8, 0x0, 0x5, 0xA, 0x9, 0x1,
	0x1, 0xC, 0xB, 0x0, 0xF, 0xE, 0x6, 0x5, 0xA, 0xD, 0x4, 0x8, 0x9, 0x3, 0x7, 0x2,
	0x1, 0x5, 0xE, 0xC, 0xA, 0x7, 0x0, 0xD, 0x6, 0x2, 0xB, 0x4, 0x9, 0x3, 0xF, 0x8,

	0x0, 0xC, 0x8, 0x9, 0xD, 0x2, 0xA, 0xB, 0x7, 0x3, 0x6, 0x5, 0x4, 0xE, 0xF, 0x1,
	0x8, 0x0, 0xF, 0x3, 0x2, 0x5, 0xE, 0xB, 0x1, 0xA, 0x4, 0x7, 0xC, 0x9, 0xD, 0x6,
	0x3, 0x0, 0x6, 0xF, 0x1, 0xE, 0x9, 0x2, 0xD, 0x8, 0xC, 0x4, 0xB, 0xA, 0x5, 0x7,
	0x1, 0xA, 0x6, 0x8, 0xF, 0xB, 0x0, 0x4, 0xC, 0x3, 0x5, 0x9, 0x7, 0xD, 0x2, 0xE
};






